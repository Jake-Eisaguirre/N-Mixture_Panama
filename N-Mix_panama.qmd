---
title: "n-mix_panama"
format: html
editor: source
---

## Load Packages

```{r}
#| output: false
if (!require(librarian)){
  install.packages("librarian")
  library(librarian)
}

librarian::shelf(tidyverse, RPostgres, DBI, unmarked, here, lubridate, kableExtra, GGally, MuMIn, AHMbook, AICcmodavg, openxlsx)

```

# Wrangle Data

## Connect to `survey_data` schema in `ribbitr` database

```{r}
#| output: false
tryCatch({
    drv <- dbDriver("Postgres")
    print("Connecting to Databaseâ€¦")
    connection <- dbConnect(drv,
                 dbname = Sys.getenv("aws_dbname"),
                 host = Sys.getenv("aws_host"),
                 port = Sys.getenv("aws_port"),
                 user = Sys.getenv("aws_user"),
                 password = Sys.getenv("aws_password"),
                 timezone=NULL)
    print("Database Connected!")
    },
    error=function(cond) {
            print("Unable to connect to Database.")
    })

#search path
dbExecute(connection, "set search_path to survey_data")

```

## Query Panama n-mix data

```{r}
#capture
n_mix_q_c <- "select l.location, r.region, s.site, v.date, v.survey_time,
s2.transect, s2.detection_type, v2.species_capture, v2.life_stage
from location l
join region r on l.location_id = r.location_id 
join site s on r.region_id = s.region_id 
join visit v on s.site_id = v.site_id 
join survey s2 on v.visit_id = s2.visit_id 
join capture v2 on s2.survey_id = v2.survey_id
where l.location = 'panama'
and v2.life_stage = 'adult';"

nmix_raw_data_c <- dbGetQuery(connection, n_mix_q_c) %>% 
  select(!c(region, location, life_stage)) %>%
  #mutate(count = replace_na(count, 1)) %>% 
  arrange(date) %>% 
  rename(species = species_capture)

#VES
n_mix_q_v <- "select l.location, r.region, s.site, v.date, v.survey_time,
s2.transect, s2.detection_type, v2.species_ves, v2.count, v2.life_stage
from location l
join region r on l.location_id = r.location_id 
join site s on r.region_id = s.region_id 
join visit v on s.site_id = v.site_id 
join survey s2 on v.visit_id = s2.visit_id 
join ves v2 on s2.survey_id = v2.survey_id
where l.location = 'panama'
and v2.life_stage = 'adult';"

nmix_raw_data_v <- dbGetQuery(connection, n_mix_q_v) %>% 
  select(!c(region, location, life_stage)) %>%
  mutate(count = replace_na(count, 1)) %>% 
  filter(!count == 100) %>% 
  arrange(date) %>% 
  group_by(site, date, survey_time, species_ves) %>% 
  summarise(n = sum(count)) %>% 
  filter(species_ves %in% c("lithobates_warszewitschii", "silverstoneia_flotator", 
                            "colostethus_panamensis", "rhaebo_haematiticus")) %>% 
  rename(species = species_ves)



# find all visits
visit_nmix_q <- "select l.location, r.region, s.site, v.date, v.survey_time, s2.detection_type, s2.observer
                from location l
                join region r on l.location_id = r.location_id
                join site s on r.region_id = s.region_id
                join visit v on s.site_id = v.site_id
                join survey s2 on v.visit_id = s2.visit_id
                where l.location = 'panama'
                and s2.detection_type = 'capture';"

ndays <- 2

nmix_raw_visits <-dbGetQuery(connection, visit_nmix_q) %>%
  arrange(date) %>%
  select(site, date, survey_time) %>%
  filter(site %in% c("altos_de_piedra", "campana_loop", "cerro_negro", "farallon", "guabal",
                     "jordinal", "mata_ahogado", "medina", "rabbit_stream", "rio_blanco", 
                     "rio_maria", "rio_tigrero", "sophia_stream", "sora"))  %>% 
  mutate(month = month(date),
         season = if_else(month > 8, "season_2", "season_1"),
         season = if_else(month %in% c(1, 2), "season_2", season),
         site = paste(site, season, sep = "_"),
         year = year(date),
         site = paste(year, site, sep = "_")) %>% 
  select(!c(month, year)) %>% 
  mutate(near = (lag(date, default = first(date)) + ndays < date) |> cumsum(), .by = site) %>%  
  mutate(visit = rep(list(1,2,3,4), length.out = n()), .by = c(site, near)) %>% 
  mutate(visit_group = cumsum(visit == 1), .by = site) %>% 
  mutate(n_visit = paste0("visit_", visit, sep = "")) %>% 
  select(!c(near, visit, season))

```

## Populate zeroes

```{r}

# combine VES and Cap data
spec_filt <- nmix_raw_data_c %>% 
  filter(species %in% c("lithobates_warszewitschii", "silverstoneia_flotator", 
                            "colostethus_panamensis", "rhaebo_haematiticus")) %>% 
  ungroup() %>% 
  group_by(date, site, species, survey_time) %>% 
  summarise(n = n())  %>% 
  rbind(nmix_raw_data_v) %>% 
  ungroup() %>%
  group_by(date, site, species, survey_time) %>% 
  summarise(n = sum(n)) %>% 
  filter(site %in% c("altos_de_piedra", "campana_loop", "cerro_negro", "farallon", "guabal",
                     "jordinal", "mata_ahogado", "medina", "rabbit_stream", "rio_blanco", 
                     "rio_maria", "rio_tigrero", "sophia_stream", "sora")) %>% 
  mutate(month = month(date),
         season = if_else(month > 8, "season_2", "season_1"),
         season = if_else(month %in% c(1, 2), "season_2", season),
         site = paste(site, season, sep = "_"),
         year = year(date),
         site = paste(year, site, sep = "_")) %>% 
  select(!c(month, year, season))
  


# populate site zeros
nmix_clean <- nmix_raw_visits %>% 
  left_join(spec_filt, by = c("site", "date", "survey_time")) %>%
  complete(nesting(date, site, survey_time, visit_group, n_visit),
           species = unique(spec_filt$species),
           fill = list(n = 0)) %>% 
  drop_na(species) %>% 
  select(!c(date)) %>% 
  group_by(site, species, visit_group, survey_time) %>% 
  mutate(temp_id = 1:n()) %>% 
  unite(survey_time, c("survey_time", "temp_id"))
  

```

# Season 1 - Loops

## 2 day 1 night visits

### Loop
```{r}

spec_list <- unique(nmix_clean$species)

lambda_results <- vector('list', length(spec_list))
detection_results <- vector('list', length(spec_list))
lam_se <- vector('list', length(spec_list))


for (i in 1:length(spec_list)){
  
   table <- nmix_clean %>% 
     filter(species == spec_list[i],
            str_detect(site, "season_1")) %>% 
     filter(survey_time %in% c("day_1", "day_2", "night_1")) %>% 
     group_by(site, visit_group) %>% 
     mutate(visit = paste("visit", 1:n(), sep = "_"),
            survey_time = str_remove_all(survey_time, "_1"),
            survey_time = str_remove_all(survey_time, "_2")) %>%
     select(!c(n_visit)) %>%
     ungroup() %>% 
     pivot_wider(id_cols = c("site", "visit_group") ,names_from = c("visit"), values_from = c("n", "survey_time")) %>% 
     select(!c(visit_group, site)) %>% 
     drop_na(n_visit_2) %>% 
     drop_na(n_visit_3)
   
     
   umf <- unmarkedFramePCount(y = table[1:3],
                              obsCovs = list(survey_time = table[4:6]))
   
   fm1 <- pcount(~survey_time ~ 1,
                 data = umf,
                 K=150)
   
  det <- plogis(coef(fm1, type = "det"))
  detection_results[[i]] <- det
  
   
  lam_tran <- backTransform(fm1, "state")
  lam_se[[i]] <- sqrt(lam_tran@covMat)
  lambda_results[[i]] <- coef(lam_tran)
  
  
  # Error checking during loop
  print(paste("done with", spec_list[i]))
      
}

detection_results_season1_ddn <- setNames(detection_results, paste(c(spec_list), "season1_ddn", sep = "_")) %>% as.data.frame()

lambda_results_season1_ddn <- setNames(lambda_results, paste(c(spec_list))) %>% as.data.frame() %>% 
  mutate(var = "abundance")

lamb_SE_season1_ddn <- setNames(lam_se, paste(c(spec_list)))%>% as.data.frame() %>% 
  mutate(var = "SE")

lambda_season1_ddn <- rbind(lambda_results_season1_ddn, lamb_SE_season1_ddn) %>% 
  mutate(surv_combo = "ddn") %>%
  relocate(var, .before = 1) %>% 
  relocate(surv_combo, .before = 1)


```

### View Results
```{r}

# Abundance
lambda_results_season1_ddn

# Transformed detections
detection_results_season1_ddn

```


## 3 day 1 night visits

### Loop
```{r}

spec_list <- unique(nmix_clean$species)

lambda_results <- vector('list', length(spec_list))
detection_results <- vector('list', length(spec_list))
lam_se <- vector('list', length(spec_list))


for (i in 1:length(spec_list)){
  
   table <- nmix_clean %>% 
     filter(species == spec_list[i],
            str_detect(site, "season_1")) %>% 
     filter(survey_time %in% c("day_1", "day_2", "day_3", "night_1")) %>% 
     group_by(site, visit_group) %>% 
     mutate(visit = paste("visit", 1:n(), sep = "_"),
            survey_time = str_remove_all(survey_time, "_1"),
            survey_time = str_remove_all(survey_time, "_2"),
            survey_time = str_remove_all(survey_time, "_3")) %>%
     select(!c(n_visit)) %>%
     ungroup() %>% 
     pivot_wider(id_cols = c("site", "visit_group") ,names_from = c("visit"), values_from = c("n", "survey_time")) %>% 
     select(!c(visit_group, site)) %>% 
     drop_na(n_visit_2) %>% 
     drop_na(n_visit_3) %>% 
     drop_na(n_visit_4)
   
     
   umf <- unmarkedFramePCount(y = table[1:4],
                              obsCovs = list(survey_time = table[5:8]))
   
   fm1 <- pcount(~survey_time ~ 1,
                 data = umf,
                 K=150)
   
  det <- plogis(coef(fm1, type = "det"))
  detection_results[[i]] <- det
  
   
  lam_tran <- backTransform(fm1, "state")
  lam_se[[i]] <- sqrt(lam_tran@covMat)
  lambda_results[[i]] <- coef(lam_tran)
  
  
  # Error checking during loop
  print(paste("done with", spec_list[i]))
      
}

detection_results_season1_dddn <- setNames(detection_results, paste(c(spec_list), "season1_dddn", sep = "_")) %>% as.data.frame()

lambda_results_season1_dddn <- setNames(lambda_results, paste(c(spec_list))) %>% as.data.frame() %>% 
  mutate(var = "abundance")

lamb_SE_season1_dddn <- setNames(lam_se, paste(c(spec_list)))%>% as.data.frame() %>% 
  mutate(var = "SE")

lambda_season1_dddn <- rbind(lambda_results_season1_dddn, lamb_SE_season1_dddn) %>% 
  mutate(surv_combo = "dddn") %>%
  relocate(var, .before = 1) %>% 
  relocate(surv_combo, .before = 1)



```

### View Results
```{r}

# Abundance
lambda_results_season1_dddn

# Transformed detections
detection_results_season1_dddn

```

# Season 2 - Loops

## 2 day 1 night visits

### Loop
```{r}

spec_list <- unique(nmix_clean$species)

lambda_results <- vector('list', length(spec_list))
detection_results <- vector('list', length(spec_list))
lam_se <- vector('list', length(spec_list))


for (i in 1:length(spec_list)){
  
   table <- nmix_clean %>% 
     filter(species == spec_list[i],
            str_detect(site, "season_2")) %>% 
     filter(survey_time %in% c("day_1", "day_2", "night_1")) %>% 
     group_by(site, visit_group) %>% 
     mutate(visit = paste("visit", 1:n(), sep = "_"),
            survey_time = str_remove_all(survey_time, "_1"),
            survey_time = str_remove_all(survey_time, "_2")) %>%
     select(!c(n_visit)) %>%
     ungroup() %>% 
     pivot_wider(id_cols = c("site", "visit_group") ,names_from = c("visit"), values_from = c("n", "survey_time")) %>% 
     select(!c(visit_group, site)) %>% 
     drop_na(n_visit_2) %>% 
     drop_na(n_visit_3)
   
     
   umf <- unmarkedFramePCount(y = table[1:3],
                              obsCovs = list(survey_time = table[4:6]))
   
   fm1 <- pcount(~survey_time ~ 1,
                 data = umf,
                 K=150)
   
  det <- plogis(coef(fm1, type = "det"))
  detection_results[[i]] <- det
  
   
  lam_tran <- backTransform(fm1, "state")
  lam_se[[i]] <- sqrt(lam_tran@covMat)
  lambda_results[[i]] <- coef(lam_tran)
  
  
  # Error checking during loop
  print(paste("done with", spec_list[i]))
      
}

detection_results_season2_ddn <- setNames(detection_results, paste(c(spec_list), "season2_ddn", sep = "_")) %>% as.data.frame()

lambda_results_season2_ddn <- setNames(lambda_results, paste(c(spec_list))) %>% as.data.frame() %>% 
  mutate(var = "abundance")

lamb_SE_season2_ddn <- setNames(lam_se, paste(c(spec_list)))%>% as.data.frame() %>% 
  mutate(var = "SE")

lambda_season2_ddn <- rbind(lambda_results_season2_ddn, lamb_SE_season2_ddn) %>% 
  mutate(surv_combo = "ddn") %>%
  relocate(var, .before = 1) %>% 
  relocate(surv_combo, .before = 1)


```

### View Results
```{r}

# Abundance
lambda_results_season2_ddn

# Transformed detections
detection_results_season2_ddn

```


## 3 day 1 night visits

### Loop
```{r}

spec_list <- unique(nmix_clean$species)

lambda_results <- vector('list', length(spec_list))
detection_results <- vector('list', length(spec_list))
lam_se <- vector('list', length(spec_list))

for (i in 1:length(spec_list)){
  
   table <- nmix_clean %>% 
     filter(species == spec_list[i],
            str_detect(site, "season_2")) %>% 
     filter(survey_time %in% c("day_1", "day_2", "day_3", "night_1")) %>% 
     group_by(site, visit_group) %>% 
     mutate(visit = paste("visit", 1:n(), sep = "_"),
            survey_time = str_remove_all(survey_time, "_1"),
            survey_time = str_remove_all(survey_time, "_2"),
            survey_time = str_remove_all(survey_time, "_3")) %>%
     select(!c(n_visit)) %>%
     ungroup() %>% 
     pivot_wider(id_cols = c("site", "visit_group") ,names_from = c("visit"), values_from = c("n", "survey_time")) %>% 
     select(!c(visit_group, site)) %>% 
     drop_na(n_visit_2) %>% 
     drop_na(n_visit_3) %>% 
     drop_na(n_visit_4)
   
     
   umf <- unmarkedFramePCount(y = table[1:4],
                              obsCovs = list(survey_time = table[5:8]))
   
   fm1 <- pcount(~survey_time ~ 1,
                 data = umf,
                 K=150)
   
  det <- plogis(coef(fm1, type = "det"))
  detection_results[[i]] <- det
  
  lam_tran <- backTransform(fm1, "state")
  lam_se[[i]] <- sqrt(lam_tran@covMat)
  lambda_results[[i]] <- coef(lam_tran)
  
  
  # Error checking during loop
  print(paste("done with", spec_list[i]))
      
}

detection_results_season2_dddn <- setNames(detection_results, paste(c(spec_list), "season2_dddn", sep = "_")) %>% as.data.frame()

lambda_results_season2_dddn <- setNames(lambda_results, paste(c(spec_list))) %>% as.data.frame() %>% 
  mutate(var = "abundance")

lamb_SE_season2_dddn <- setNames(lam_se, paste(c(spec_list))) %>% as.data.frame() %>% 
  mutate(var = "SE")

lambda_season2_dddn <- rbind(lambda_results_season2_dddn, lamb_SE_season2_dddn)  %>% 
  mutate(surv_combo = "dddn") %>%
  relocate(var, .before = 1) %>% 
  relocate(surv_combo, .before = 1)

```

## Combine all Season 2 Results
```{r}

Season2_Abundance <- rbind(lambda_season2_dddn, lambda_season2_ddn)

```

# Combine all results into table

## colostethus_panamensis
```{r}

all_lam_col <- c(lambda_results_season1_dddn$colostethus_panamensis_season1_dddn, 
                 lambda_results_season1_ddn$colostethus_panamensis_season1_ddn, 
                 lambda_results_season2_dddn$colostethus_panamensis_season2_dddn, 
                 lambda_results_season2_ddn$colostethus_panamensis_season2_ddn)

all_det_col <- c(detection_results_season1_dddn$colostethus_panamensis_season1_dddn, 
                 detection_results_season1_ddn$colostethus_panamensis_season1_ddn, 
                 detection_results_season2_dddn$colostethus_panamensis_season2_dddn, 
                 detection_results_season2_ddn$colostethus_panamensis_season2_ddn)
```

## lithobates_warszewitschii
```{r}

all_lam_washy <- c(lambda_results_season1_dddn$lithobates_warszewitschii_season1_dddn, 
                 lambda_results_season1_ddn$lithobates_warszewitschii_season1_ddn, 
                 lambda_results_season2_dddn$lithobates_warszewitschii_season2_dddn, 
                 lambda_results_season2_ddn$lithobates_warszewitschii_season2_ddn)

all_det_washy <- c(detection_results_season1_dddn$lithobates_warszewitschii_season1_dddn, 
                 detection_results_season1_ddn$lithobates_warszewitschii_season1_ddn, 
                 detection_results_season2_dddn$lithobates_warszewitschii_season2_dddn, 
                 detection_results_season2_ddn$lithobates_warszewitschii_season2_ddn)
```

## rhaebo_haematiticus
```{r}

all_lam_rha <- c(lambda_results_season1_dddn$rhaebo_haematiticus_season1_dddn, 
                 lambda_results_season1_ddn$rhaebo_haematiticus_season1_ddn, 
                 lambda_results_season2_dddn$rhaebo_haematiticus_season2_dddn, 
                 lambda_results_season2_ddn$rhaebo_haematiticus_season2_ddn)

all_det_rha <- c(detection_results_season1_dddn$rhaebo_haematiticus_season1_dddn, 
                 detection_results_season1_ddn$rhaebo_haematiticus_season1_ddn, 
                 detection_results_season2_dddn$rhaebo_haematiticus_season2_dddn, 
                 detection_results_season2_ddn$rhaebo_haematiticus_season2_ddn)
```

## silverstoneia_flotator
```{r}

all_lam_flo <- c(lambda_results_season1_dddn$silverstoneia_flotator_season1_dddn, 
                 lambda_results_season1_ddn$silverstoneia_flotator_season1_ddn, 
                 lambda_results_season2_dddn$silverstoneia_flotator_season2_dddn, 
                 lambda_results_season2_ddn$silverstoneia_flotator_season2_ddn)

all_det_flo <- c(detection_results_season1_dddn$silverstoneia_flotator_season1_dddn, 
                 detection_results_season1_ddn$silverstoneia_flotator_season1_ddn, 
                 detection_results_season2_dddn$silverstoneia_flotator_season2_dddn, 
                 detection_results_season2_ddn$silverstoneia_flotator_season2_ddn)
```